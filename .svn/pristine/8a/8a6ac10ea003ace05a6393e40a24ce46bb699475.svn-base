package falstad;

import static org.junit.Assert.*;

import java.awt.event.KeyListener;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import falstad.Constants.StateGUI;
import generation.MazeConfiguration;
import generation.MazeFactory;
import generation.OrderStub;

public class WizardTest {

	MazeApplication app ; 
	KeyListener kl ;
    Robot robot ; 
	MazeController controller ;
	StateGUI state ;
	MazeFactory factory; 
	
	MazeConfiguration mazeConfig ;
	
	RobotDriver driver;
	
	static final float INITIAL_BATTERY_LEVEL = 2500 ;
	static final float DISTANCE_SENSING = 1 ;
	static final float ROTATE_90 = 3 ;
	static final float MOVE_FORWARD = 5 ;
	
	@Before
	public void setUp() throws Exception {
		controller = new FakeController() ;
		controller.init() ;
		factory = new MazeFactory(true);
		assertTrue(factory.order(controller)) ;
		factory.waitTillDelivered();
		
		assertNotNull(controller.getMazeConfiguration());
		assertNotNull (controller.getMazeConfiguration().getMazecells());
		assertNotNull (controller.getMazeConfiguration().getMazedists());
		
		robot = controller.getRobot() ; 
		assertNotNull(robot);
		robot.setMaze(controller) ;
	//	assertNotNull(robot.getMazeController);
		
		driver = controller.getDriver() ;
		assertNotNull(driver);
		driver.setRobot(robot) ;		
		//assertNotNull(driver.getRobot);

	}
	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testGetEnergyConsumptionAtBeginning() {
		assertTrue(driver.getEnergyConsumption() == 0) ;
	}
	
	@Test
	public void testGetPathLengthAtBeginning() {
		System.out.println("test driver.get pathlength is " + driver.getPathLength());
		assertTrue(driver.getPathLength() == 0) ;
	}
	
	@Test
	public void testDrive2Exit() {
		
		try {
			driver.drive2Exit() ;
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			assertTrue(controller.isOutside(controller.getCurrentPosition()[0], controller.getCurrentPosition()[1])) ;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
