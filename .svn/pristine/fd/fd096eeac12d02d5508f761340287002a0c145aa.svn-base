package generation;

import java.awt.List;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;

public class MazeBuilderEller extends MazeBuilder implements Runnable {
    	
	int row = 0;
	 						//row and parent initialized; because parent never changes. Row never changes because we are only looking at
	int parent = 1;          // One Row at a time 
	                          
	public MazeBuilderEller() {
		// TODO Auto-generated constructor stub
		super();
		System.out.println("MazeBuilderPrim uses Eller's algorithm to generate maze.");
	}
	
	public MazeBuilderEller(boolean det) {
		super(det);
		System.out.println("MazeBuilderPrim uses Eller's algorithm to generate maze.");
	}
	
	@Override
	protected void generatePathways() {  
		
		final ArrayList<Wall> candidates = new ArrayList<Wall>();
		int x;
		int y;
		for (x = 0; x < width; x++){
			for (y = 0; y < height; y++){
			    updateListOfWalls(x, y, candidates);
			}
		}
		
		cells.initialize();
		
		int [][] grid = new int [width][height];
		
		int column = 0;
		
		int count = 0;
		
		
		
		while (row < width - 1){
			
			/*for (column = 0; column < height - 1; column++){
				
			
				Wall horizontalWall = new Wall(row, column, CardinalDirection.East);
				Wall verticalWall = new Wall (row, column, CardinalDirection.South);
				
				cells.addWall(horizontalWall, true);
				cells.addWall(verticalWall, true);
				
			}*/
			
			
			HashMap<Integer, ArrayList<Integer>> countMap = new HashMap<Integer, ArrayList<Integer>>();

			for (column = 0; column < height - 1; column++ ){
				if (grid[row][column] == 0) {                  //meaning if that spot is not empty
					grid[row][column] = parent;                 //assign it to a new set
					parent++;
				}
			}
			
			for (column = 0; column < height - 1; column++){           //initialize first row
				
				boolean mergeHorizontal = flipCoin();
				
				if (mergeHorizontal == true){
					
					Wall horizontalWall = new Wall(column, row, CardinalDirection.East);
					
					if (grid[row][column + 1] != grid[row][column]) {    //if not in same set already
					    grid[row][column + 1] = grid[row][column];   		//merge
					    
					        for (int col = 0; col < height - 1; col++)       //change everything else of the same set to this set. 
					        	grid[row][col] = grid[row][column];
					        
					    cells.deleteWall(horizontalWall);
					} 
				}
				
				ArrayList<Integer> columnList = new ArrayList<>();
				
				columnList.add(column);
				
				countMap.put(grid[row][column], columnList);
			}
			
		    
			for (column = 0; column < height - 1; column ++){
		        
				Wall verticalWall =  new Wall(column, row, CardinalDirection.South);
				
				int occurences = countMap.get(grid[row][column]).size();			//NEED CASE WHERE ITS THE ONLY ONE IN THE SET
				boolean mergeVertically = flipCoin();             
				
				if (occurences == 1) {
			        grid[row + 1][column] = grid[row][column];
		    	    cells.deleteWall(verticalWall);

				if (mergeVertically == true){
					grid[row + 1][column] = grid[row][column];           //merge downwards
				    cells.deleteWall(verticalWall);
				    }
			    }
		    }
			
			row ++;

		}	
		
		//row == height - 1; aka last row. MIGHT HAVE ISSUE WHERE SECOND LAST ROW DOESN'T VERTICALLY MERGE INTO LAST ROW!!
		
		Wall horizontalWall = new Wall(row, column, CardinalDirection.East);
		
		for (column = 0; column < height - 1; column++){
			cells.addWall(horizontalWall, true);
		}

		for (column = 0; column < height - 1; column++){
		    if ( grid[row][column + 1] != grid[row][column] ) {
		    	grid[row][column + 1] = grid[row][column];                       //merged
		    	
		    	cells.deleteWall(horizontalWall);
		    	
		    }
		}		
	}
	
	private boolean flipCoin(){
					
		Random random = new Random();
			
		//random.setSeed(1);
					
	    boolean coin = random.nextBoolean();
	   
	    return coin;
	}
	
	/*private void updateListOfWalls(int x, int y, ArrayList<Wall> walls) {
		Wall wall = new Wall(x, y, CardinalDirection.East) ;
		for (CardinalDirection cd : CardinalDirection.values()) {
			wall.setWall(x, y, cd);
			if (cells.canGo(wall)) // 
			{
				walls.add(new Wall(x, y, cd));
			}
		}
	}*/
		
	
	

}
