package generation;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class MazeBuilderEllerTest {
    
	
	 static Factory[] testFactory;
	 
	Thread testEllerThread;
	
	MazeConfiguration testConfiguration = new MazeContainer();
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		
		testFactory = new Factory[7];
		
		testFactory[0] = new MazeFactory(true);
		testFactory[0].waitTillDelivered();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}
	
	@Test
	public void testHasExit() {
		
		OrderStubEller stub = new OrderStubEller();
		
		Factory hasExitFactory;
		hasExitFactory = new MazeFactory(true);
		hasExitFactory.order(stub);

		hasExitFactory.waitTillDelivered();
		 
		MazeConfiguration mazeConfig = stub.getMazeConfiguration();
				
		int INFINITY = Integer.MAX_VALUE;
		
		mazeConfig.setStartingPosition(0, 1);
		
		assertTrue(INFINITY > mazeConfig.getMazedists().getDistance(0, 1));
	}
	
	//test can get to the exit from every spot in the maze
	
	@Test
    public void testExitFromEverySpot(){
		
		OrderStubEller stub = new OrderStubEller();
		
		Factory exitFromEverySpotFactory;
		exitFromEverySpotFactory = new MazeFactory(true);
		exitFromEverySpotFactory.order(stub);

		exitFromEverySpotFactory.waitTillDelivered();
		 
		MazeConfiguration mazeConfig = stub.getMazeConfiguration();
				
		int INFINITY = Integer.MAX_VALUE;
		
		//Cells testCells = mazeConfig.getMazecells();
		//mazeConfig.
		
		int row;
		int column; 
		
		for ( row = 0; row < mazeConfig.getWidth() - 1; row++) {
			for ( column = 0; column < mazeConfig.getHeight() - 1; column++ ) {
		        assertTrue(INFINITY > mazeConfig.getMazedists().getDistance(row, column));
			}
		}
	}
	
	@Test
	public void testWidth(){
        OrderStubEller stub = new OrderStubEller();
		
		Factory widthFactory;
		widthFactory = new MazeFactory(true);
		widthFactory.order(stub);

		widthFactory.waitTillDelivered();
		 
		MazeConfiguration mazeConfig = stub.getMazeConfiguration();
		
		mazeConfig.setWidth(10);
		
		assertTrue(10 == mazeConfig.getWidth());
		
		mazeConfig.setWidth(99);
		assertTrue(99 == mazeConfig.getWidth());
	
	}
	
	@Test
	public void testHeight(){
        OrderStubEller stub = new OrderStubEller();
		
		Factory heightFactory;
		heightFactory = new MazeFactory(true);
		heightFactory.order(stub);

		heightFactory.waitTillDelivered();
		 
		MazeConfiguration mazeConfig = stub.getMazeConfiguration();
		
		mazeConfig.setHeight(10);
		assertTrue(10 == mazeConfig.getHeight());
		
		mazeConfig.setHeight(99);
		assertTrue(99 == mazeConfig.getHeight());
	}
	
	//fursthest away
	//start position same regardless where you are
	//is the position valid
	
	@Test
	public void testEntryExitMaxDistance(){
		
        OrderStubEller stub = new OrderStubEller();
		
		Factory heightFactory;
		heightFactory = new MazeFactory(true);
		heightFactory.order(stub);

		heightFactory.waitTillDelivered();
		 
		MazeConfiguration mazeConfig = stub.getMazeConfiguration();
		
		int[] startPosition = mazeConfig.getMazedists().getStartPosition();
		
		int [] endPosition = mazeConfig.getMazedists().getExitPosition();
		
		assertTrue (mazeConfig.getMazedists().getMaxDistance() == mazeConfig.getMazedists().getDistance(startPosition[0], startPosition[1]));

	}
	
	
	@Test
	public void testValidPosition(){
		
        OrderStubEller stub = new OrderStubEller();
		
		Factory heightFactory;
		heightFactory = new MazeFactory(true);
		heightFactory.order(stub);

		heightFactory.waitTillDelivered();
		 
		MazeConfiguration mazeConfig = stub.getMazeConfiguration();
		
		int row;
		int col;
				
		for (row = 0; row < mazeConfig.getWidth() - 1; row++) {
			for (col = 0; col < mazeConfig.getHeight() - 1; col++){
				assertTrue(mazeConfig.isValidPosition(row, col));
			}
		}		
	}
	
	@Test
	public void testCorrectStartPosition(){
		
        OrderStubEller stub = new OrderStubEller();
		
		Factory heightFactory;
		heightFactory = new MazeFactory(true);
		heightFactory.order(stub);

		heightFactory.waitTillDelivered();
		 
		MazeConfiguration mazeConfig = stub.getMazeConfiguration();
		
		mazeConfig.setStartingPosition(9, 8);
		
		assertTrue(9 == mazeConfig.getStartingPosition()[0] && 8 == mazeConfig.getStartingPosition()[1]);
		
	}
	
	//also test for expected exception errors!

}