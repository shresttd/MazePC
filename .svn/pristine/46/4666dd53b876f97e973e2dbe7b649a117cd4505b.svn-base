package falstad;

import generation.CardinalDirection;

public class BasicRobot implements Robot {
	
	MazeController mazeController ;
	float batteryLevel ;

	public BasicRobot() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public void rotate(Turn turn) {
		// TODO Auto-generated method stub
		
		switch (turn) {
		case LEFT : { }
		case RIGHT : { } 
		case AROUND : { }
		
		default : { }
		}
	}

	@Override
	public void move(int distance, boolean manual) {
		// TODO Auto-generated method stub
		
		assert ( distance >= 0 ) ;
	}

	@Override
	public int[] getCurrentPosition() throws Exception {
		// TODO Auto-generated method stub
		
		int currentX = mazeController.getCurrentPosition()[0] ;
		int currentY = mazeController.getCurrentPosition()[1] ; 
				
		assert ( 0 <= currentX && currentX  < mazeController.getMazeConfiguration().getWidth() );
		assert ( 0 <= currentY && currentY  < mazeController.getMazeConfiguration().getHeight() );
		
		return mazeController.getCurrentPosition() ;
	}

	@Override
	public void setMaze(MazeController maze) {
		// TODO Auto-generated method stub
		this.mazeController = maze;
	}

	@Override
	public boolean isAtExit() {
		// TODO Auto-generated method stub
		
		int currentX = mazeController.getCurrentPosition()[0] ;
		int currentY = mazeController.getCurrentPosition()[1] ;
		
		if ( mazeController.getMazeConfiguration().getMazedists().isExitPosition(currentX, currentY) ) {
			return true;
		}

		return false;
	}

	@Override
	public boolean canSeeExit(Direction direction) throws UnsupportedOperationException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isInsideRoom() throws UnsupportedOperationException {
		// TODO Auto-generated method stub
		
		int currentX = mazeController.getCurrentPosition()[0] ;
		int currentY = mazeController.getCurrentPosition()[1] ;
		
		return mazeController.getMazeConfiguration().getMazecells().isInRoom(currentX, currentY) ;

	}

	@Override
	public boolean hasRoomSensor() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public CardinalDirection getCurrentDirection() {
		// TODO Auto-generated method stub
		
		CardinalDirection.getDirection() ;
		
		return null;
	}

	@Override
	public float getBatteryLevel() {
		// TODO Auto-generated method stub
		return batteryLevel ;
	}

	@Override
	public void setBatteryLevel(float level) {
		// TODO Auto-generated method stub
		this.batteryLevel = level ;
	}

	@Override
	public float getEnergyForFullRotation() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public float getEnergyForStepForward() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean hasStopped() {
		// TODO Auto-generated method stub
		
		if (getBatteryLevel() <= 0 ) {
			return true;
		}
		
		return false;
	}

	@Override
	public int distanceToObstacle(Direction direction) throws UnsupportedOperationException {
		// TODO Auto-generated method stub
		 
		return 0;
	}

	@Override
	public boolean hasDistanceSensor(Direction direction) {
		// TODO Auto-generated method stub
		return false;
	}

}
