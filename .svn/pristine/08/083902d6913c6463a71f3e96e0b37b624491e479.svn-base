package falstad;

import falstad.Constants.StateGUI;
import generation.CardinalDirection;
import generation.Cells;
import generation.Distance;
import generation.Factory;
import generation.MazeConfiguration;
import generation.MazeContainer;
import generation.MazeFactory;
import generation.Order;
import generation.Order.Builder;

import java.awt.*;
import java.util.ArrayList;
import java.util.Iterator;

public class FakeController extends MazeController {
	
	int skill ;
	Builder builder ;
	boolean perfect ;
	private MazeConfiguration mazeConfig;
	int px, py, dx, dy ;
	StateGUI state;

	
	public FakeController() {
		// TODO Auto-generated constructor stub
		super() ;
		this.skill = 1 ;
		this.builder = Builder.DFS ;
		this.perfect = false ;
		this.mazeConfig = new MazeContainer() ;
		this.state = StateGUI.STATE_PLAY ;
		
	}
	
	public FakeController(Order.Builder builder) {
		// TODO Auto-generated constructor stub
		super() ;
		this.skill = 1 ;
		this.builder = builder ; 
		this.perfect = false ;
		
	}
	public FakeController(String filename) {
		// TODO Auto-generated constructor stub
		super() ;
		this.skill = 1 ;
		this.builder = Builder.DFS ;
		this.perfect = false ;
		
	}
	
	@Override
	public void init() {
	}
	
	@Override
	protected void setSkillLevel(int skill) {
		this.skill = skill ;
	}
	@Override
	protected void setBuilder(Builder builder) {
		this.builder = builder ;
	}

	@Override
	protected void setPerfect(boolean perfect) {
		this.perfect = perfect ;
	}

	@Override
	public int getSkillLevel() {
		// TODO Auto-generated method stub
		return this.skill;
	}
	

	@Override
	public Builder getBuilder() {
		// TODO Auto-generated method stub
		return this.builder;
	}

	@Override
	public boolean isPerfect() {
		// TODO Auto-generated method stub
		return this.perfect;
	}
	
	@Override
	public MazeConfiguration getMazeConfiguration() {
		return this.mazeConfig ;
	}
		
	@Override
	public void deliver(MazeConfiguration mazeConfig) {

		this.mazeConfig = mazeConfig;
		int[] start = mazeConfig.getStartingPosition() ;

		setCurrentPosition(start[0],start[1]) ;
		setCurrentDirection(1, 0) ;
	}

	@Override
	public void updateProgress(int percentage) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public boolean keyDown (int key) { 
		switch (key) {
		case Event.UP: case 'k': case '8':
			walk(1);
			if (isOutside(px,py)) {
				switchToFinishScreen();
			}
			break;
		case Event.LEFT: case 'h': case '4':
			rotate(1);
			break;
		case Event.RIGHT: case 'l': case '6':
			// turn right
			rotate(-1);
			break;
		case Event.DOWN: case 'j': case '2':
			walk(-1);
			if (isOutside(px,py)) {
				switchToFinishScreen();
			}
			break;	
		}
		return true ;
	}
	
	@Override
	protected void setCurrentPosition(int x, int y){
		px = x ;
		py = y ;
	}
	
	@Override
	protected void setCurrentDirection(int x, int y){	
		dx = x ;
		dy = y ;
	}
	
	@Override
	protected int[] getCurrentPosition() {
		int[] result = new int[2];
		result[0] = px;
		result[1] = py;
		return result;
	}
	
	@Override
	protected CardinalDirection getCurrentDirection() {
		return CardinalDirection.getDirection(dx, dy);
	}


}
