package falstad;

import falstad.Constants.StateGUI;
import generation.CardinalDirection;
import generation.Cells;
import generation.Distance;
import generation.Factory;
import generation.MazeConfiguration;
import generation.MazeContainer;
import generation.MazeFactory;
import generation.Order;
import generation.Order.Builder;

import java.awt.*;
import java.util.ArrayList;
import java.util.Iterator;

/**
 * This class extends the MazeController for testing purposes.
 * So that it ignores anything related to the GUI and redrawing operations.
 * @author TJ
 */
public class FakeController extends MazeController {
	
	int skill ;
	Builder builder ;
	boolean perfect ;
	private MazeConfiguration mazeConfig;
	StateGUI state;
	int px, py;
	int dx, dy;
	private int angle ;
	
	Robot robot ;
	RobotDriver driver ;
	
	public FakeController() {
		super() ;
		this.skill = 1 ;
		this.builder = Builder.DFS ;
		this.perfect = false ;
	//	this.mazeConfig = new MazeContainer() ;
		robot = new BasicRobot() ;
		robot.setMaze(this);
		driver = new Wizard() ;
		driver.setRobot(robot);	
	}
	
	public FakeController(Order.Builder builder, RobotDriver driver, int skill) {
		super() ;
		this.skill = skill;
		this.builder = builder ;
		this.perfect = false ;
		//this.mazeConfig = new MazeContainer() ;
		robot = new BasicRobot() ;
		robot.setMaze(this);
		this.driver = driver ;
		this.driver.setRobot(robot);
		
	}
	
	public FakeController(Order.Builder builder) {
		// TODO Auto-generated constructor stub
		super() ;
		this.skill = 1 ;
		this.builder = builder ; 
		this.perfect = false ;
		
	}
	public FakeController(String filename) {
		// TODO Auto-generated constructor stub
		super() ;
		this.skill = 1 ;
		this.builder = Builder.DFS ;
		this.perfect = false ;
		
	}
	
	@Override
	public void init() {
		this.state = StateGUI.STATE_PLAY ;
	}
		
	@Override
	public void deliver(MazeConfiguration mazeConfig) {

		this.mazeConfig = mazeConfig;
		int[] start = mazeConfig.getStartingPosition() ;

		setCurrentPosition(start[0],start[1]) ;
		setCurrentDirection(1, 0) ;
	}

	@Override
	public MazeConfiguration getMazeConfiguration() {
		return this.mazeConfig;
	}
	@Override
	public void updateProgress(int percentage) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	protected boolean checkMove(int dir) {
		CardinalDirection cd = null;
		switch (dir) {
		case 1: // forward
			cd = getCurrentDirection(); 
			break;
		case -1: // backward
			cd = getCurrentDirection().oppositeDirection();
			break;
		default:
			throw new RuntimeException("Unexpexted direction value: " + dir);
		}
		return !mazeConfig.hasWall(px, py, cd);
	}
	
	@Override
	protected synchronized void walk(int dir) {
		if (!checkMove(dir)) 
			return;
		/*// walkStep is a parameter of the redraw method in FirstPersonDrawer
		// it is used there for scaling steps
		// so walkStep is implicitly used in slowedDownRedraw which triggers the redraw
		// operation on all listed viewers
		for (int step = 0; step != 4; step++) {
			walkStep += dir;
			//slowedDownRedraw();
		} */
		setCurrentPosition(px + dir*dx, py + dir*dy) ;
		//walkStep = 0;
		//logPosition();
	}
	
	@Override
	protected synchronized void rotate(int dir) {
		final int originalAngle = angle;
		final int steps = 4;

		for (int i = 0; i != steps; i++) {
			// add 1/4 of 90 degrees per step 
			// if dir is -1 then subtract instead of addition
			angle = originalAngle + dir*(90*(i+1))/steps; 
			//rotateStep();
		}
		setCurrentDirection((int) Math.cos(radify(angle)), (int) Math.sin(radify(angle))) ;
		//logPosition();
	}
	
	@Override
	protected boolean isOutside(int x, int y) {
		return !mazeConfig.isValidPosition(x, y) ;
	}
	
	@Override
	protected void setCurrentPosition(int x, int y)
	{
		px = x ;
		py = y ;
	}
	
	@Override
	protected void setCurrentDirection(int x, int y)
	{
		dx = x ;
		dy = y ;
	}
	
	@Override
	protected int[] getCurrentPosition() {
		int[] result = new int[2];
		result[0] = px;
		result[1] = py;
		return result;
	}
	
	@Override
	protected CardinalDirection getCurrentDirection() {
		return CardinalDirection.getDirection(dx, dy);
	}
	
	@Override
	public boolean keyDown (int key) { 
		switch (key) {
		case Event.UP: case 'k': case '8':
			System.out.println("mazeCells in fakeController is: " +this.getMazeConfiguration().getMazecells()) ;
			walk(1);
			if (isOutside(px,py)) {
				//switchToFinishScreen();
			}
			break;
		case Event.LEFT: case 'h': case '4':
			rotate(1);
			break;
		case Event.RIGHT: case 'l': case '6':
			// turn right
			rotate(-1);
			break;
		case Event.DOWN: case 'j': case '2':
			walk(-1);
			if (isOutside(px,py)) {
				//switchToFinishScreen();
			}
			break;	
		}
		return true ;
	}
}
